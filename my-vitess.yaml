apiVersion: vitess.io/v1alpha1
kind: VitessCluster
metadata:
  name: vitess
spec:
  selector:
    matchLabels:
      app: vitess
  template:
    metadata:
      labels:
        app: vitess
  cells:
  - name: global
    etcd:
      version: 3.2.11
      size: 3
    vtctld:
      image: vitess/lite:v2.1.1
      replicas: 1
      resources:
        limits: {cpu: "100m", memory: "128Mi"}
    orchestrator:
      image: vitess/orchestrator:latest
      replicas: 1
      resources:
        limits: {cpu: "100m", memory: "128Mi"}
  - name: zone1
    vtgate:
      image: vitess/lite:v2.1.1
      replicas: 3
      exportMysql: true
      secret:
        name: credentials
        key: mysql.json
      resources:
        limits: {cpu: "100m", memory: "128Mi"}
  keyspaces:
  - name: main
    cells: ["zone1"]
    shards:
    - keyRange: {start: "", end: "80"}
    - keyRange: {start: "80", end: ""}
    tablets:
      defaults:
        image: vitess/lite:v2.1.1
        volumeClaim:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests: {storage: "4Gi"}
      masterEligible:
        replicas: 2
        vttablet:
          resources:
            limits: {cpu: "500m", memory: "512Mi"}
        mysql:
          resources:
            limits: {cpu: "500m", memory: "512Mi"}
      batch:
        replicas: 1
        vttablet:
          resources:
            limits: {cpu: "100m", memory: "256Mi"}
        mysql:
          resources:
            limits: {cpu: "100m", memory: "256Mi"}
# These flags are added to any Vitess binaries that need access to backups.
# For example, if you're in GCE and gave your Kubernetes nodes the "storage"
# scope, you can specify a pre-existing GCS bucket like this:
#  backupFlags:
#    backup_storage_implementation: gcs
#    gcs_backup_storage_bucket: your-bucket-name
